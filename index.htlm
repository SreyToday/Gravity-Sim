<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gravity Sim</title>
    <style>
        body { text-align: center; background: #111; color: pink; }
        h2 { font-family: Arial, sans-serif; }
        canvas { background: black; display: block; margin: 0 auto; }
        input { margin-top: 10px; }
    </style>
</head>
<body>
    <h2>Nucleus Size</h2>
    <input type="range" id="gravity" min="0.01" max="0.5" step="0.01" value="0.1">
    <canvas id="canvas"></canvas>
    
    <script>
        const canvas = document.getElementById("canvas");
        const ctx = canvas.getContext("2d");
        canvas.width = 600;
        canvas.height = 600;
        const nucleus = { x: 300, y: 300, radius: 30 };
        const particles = [];
        const gravitySlider = document.getElementById("gravity");
        let gravityStrength = parseFloat(gravitySlider.value);

        class Particle {
            constructor() {
                const angle = Math.random() * Math.PI * 2;
                const radius = Math.random() * 150 + 50;
                this.x = nucleus.x + radius * Math.cos(angle);
                this.y = nucleus.y + radius * Math.sin(angle);
                this.vx = Math.random() * 2 - 1;
                this.vy = Math.random() * 2 - 1;
                this.initialDistance = radius;
            }
            update() {
                const dx = nucleus.x - this.x;
                const dy = nucleus.y - this.y;
                const distance = Math.sqrt(dx * dx + dy * dy);
                
                if (distance > nucleus.radius) {
                    const force = gravityStrength / distance;
                    this.vx += force * dx;
                    this.vy += force * dy;
                } else {
                    const angle = Math.atan2(dy, dx);
                    this.vx = -Math.cos(angle) * (this.initialDistance / 50);
                    this.vy = -Math.sin(angle) * (this.initialDistance / 50);
                }
                
                this.x += this.vx;
                this.y += this.vy;
            }
            draw() {
                ctx.fillStyle = "orange";
                ctx.beginPath();
                ctx.arc(this.x, this.y, 3, 0, Math.PI * 2);
                ctx.fill();
            }
        }
        
        for (let i = 0; i < 30; i++) {
            particles.push(new Particle());
        }
        
        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            nucleus.radius = ((gravityStrength * 50) + 10);
            ctx.fillStyle = "red";
            ctx.beginPath();
            ctx.arc(nucleus.x, nucleus.y, nucleus.radius, 0, Math.PI * 2);
            ctx.fill();
            
            particles.forEach(p => {
                p.update();
                p.draw();
            });
            requestAnimationFrame(animate);
        }
        
        gravitySlider.addEventListener("input", () => {
            gravityStrength = parseFloat(gravitySlider.value);
            nucleus.radius = ((gravityStrength * 50) + 10);
        });
        
        animate();
    </script>
</body>
</html>
